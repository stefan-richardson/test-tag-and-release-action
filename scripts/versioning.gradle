gradle.projectsEvaluated {
    tasks.register("nextSemVerTag") {
        group = 'Versioning - Github Actions Only'
        description = "Sets the version based on commit message type"

        doLast {
            def v = buildFile.getText().find(version)
            def (baseVersion, snapshot) = v.tokenize('-')
            def (major, minor, patch) = baseVersion.tokenize('.')

            if (project.hasProperty('incrementType')) {
                def incrementType = incrementType.toLowerCase()
                def newVersion

                if (incrementType.contains('breakingchange')) {
                    newVersion = "${major.toInteger() + 1}.0.0"
                } else if (incrementType.contains('feat')) {
                    newVersion = "${major}.${minor.toInteger() + 1}.0"
                } else {
                    newVersion = "${major}.${minor}.${patch}"
                }

                def updated = buildFile.text.replaceFirst("version = '${version}'", "version = '${newVersion}'")
                buildFile.text = updated
                println "ðŸ”– New version: ${newVersion}"
            }
        }
    }

    tasks.register("nextSnapshot") {
        group = 'Versioning - Github Actions Only'
        description = "Increments patch version and appends -SNAPSHOT"

        doLast {
            def v = buildFile.getText().find(version)
            def (baseVersion, snapshot) = v.tokenize('-')
            def (major, minor, patch) = baseVersion.tokenize('.')
            def newPatch = patch.toInteger() + 1
            def newVersion = "${major}.${minor}.${newPatch}-SNAPSHOT"

            def updated = buildFile.text.replaceFirst("version = '${v}'", "version = '${newVersion}'")
            buildFile.text = updated
            println "ðŸ”§ Bumped to next snapshot version: ${newVersion}"
        }
    }
}
