// versioning.gradle

// Task: nextSemVerTag
task nextSemVerTag {
    group = 'Versioning - Github Actions Only'
    description = "Sets the version by checking for a nextSemVerTag Flag -PincrementType='commit type'"

    doLast {
        def v = buildFile.getText().find(version)
        def (baseVersion, snapshot) = v.tokenize('-')
        def (major, minor, patch) = baseVersion.tokenize('.')

        if (project.hasProperty('incrementType')) {
            def incrementType = incrementType.toLowerCase()
            def newVersion

            if (incrementType.contains('breakingchange')) {
                newVersion = (Integer.parseInt(major) + 1) + ".0.0"
            } else if (incrementType.contains('feat')) {
                newVersion = major + "." + (Integer.parseInt(minor) + 1) + ".0"
            } else {
                newVersion = major + "." + minor + "." + (Integer.parseInt(patch) + 1)
            }

            String updated = buildFile.getText().replaceFirst("version = '"+version.toString()+"'",
                    "version = '" + newVersion + "'")
            buildFile.setText(updated)
            println newVersion
        }
    }
}

// Task: nextSnapshot
task nextSnapshot {
    group = 'Versioning - Github Actions Only'
    description = "Adds +1 to patch and appends '-SNAPSHOT'"

    doLast {
        def v = buildFile.getText().find(version)
        def (baseVersion, snapshot) = v.tokenize('-')
        def (major, minor, patch) = baseVersion.tokenize('.')
        def newPatch = Integer.parseInt(patch) + 1
        def newVersion = "${major}.${minor}.${newPatch}-SNAPSHOT"
        String updated = buildFile.getText().replaceFirst("version = '${v.toString()}'", "version = '${newVersion}'")
        buildFile.setText(updated)
        println newVersion
    }
}
